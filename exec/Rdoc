#!/usr/bin/Rscript --vanilla --quiet

arg <- commandArgs(trailingOnly = TRUE)

usage <- function(){cat('
Usage:

   Rdoc strings [-t type]    - Use help (type can be text and/or pdf)
   Rdoc -v [strings]         - Use vignette

')
}

## ## Example
## 'Rdoc read.csv car::recode -t text pdf'
## 'Rdoc -v grid data.table::datatable-faq'
## 'Rdoc -v DT grid::grid'

Rdoc_quit <- function(){
    usage()
    quit(save = 'no', status = 1)
}

if(0L == length(arg)){
    Rdoc_quit()
}

## -----------------------
## Help (and its helpers)
## -----------------------

## Help pages
pkg_function_splitter <- function(x, types){

    splitted <- strsplit(x, '::')[[1]]
    if (length(splitted) == 1L){
        help_package <- "NULL"
        help_topic <- splitted
    } else if (length(splitted) == 2L) {
        help_package <- splitted[1]
        help_topic <- splitted[2]
    }

    ## lapply(types, function(x) c(help_package, help_topic, x))
    c(help_package, help_topic)
}

process_help_args <- function(arg){

    ## Big picture: split the string if you find -t: then process the left
    ## part as 'function' or 'package::function' and keep the right part as
    ## common type. Return a list

    allowed_types <- c('text', 'pdf')

    ## Type:
    ## 1 - find the first occurrence of -t, save what to the left and then
    ##     keep what to the right if match allowed_types
    ## 2 - If -t is not specified, look for default options or set it to text
    ## 3 - make it sure there are no not allowed_types

    first_t_index <- which(arg %in% '-t')[1]

    if (is.na(first_t_index)){ # -t not specified
        type <- getOption('help_type', 'text')
    } else { #-t is specified
        left <- arg[seq_len(first_t_index - 1)]
        right <- arg[seq(first_t_index + 1, length(arg))]
        arg <- left
        type <- allowed_types[allowed_types %in% right]
    }

    ## help args without type
    help_args <- lapply(arg, pkg_function_splitter)
    ## add the format at the end
    help_args <- lapply(type, function(x) Map(c, help_args, x))

    help_args
}

Help <- function(arg){
    help_args <- process_help_args(arg)

    display_help <- function(x){
        lapply(x, function(x) {
            ## if html search for the static doc file and open it
            package   <- x[1]
            topic     <- x[2]
            help_type <- x[3]
            ## Otherwise go with classic help
            ## see ?help on why (), searching pkg_ref
            help(topic   = (topic),
                 package = (if (package == 'NULL') NULL else package),
                 lib.loc = NULL,
                 verbose = FALSE,
                 try.all.packages = getOption('help.try.all.packages'),
                 help_type = (help_type)
                 )
        })
    }
    lapply(help_args, display_help)
}

## ---------------------------
## Vignette (and its helpers)
## ---------------------------
preprocess_vignette_args <- function(arg){
    lapply(arg, pkg_function_splitter)
}


Vignette <- function(arg){
    ## if arguments are missing, otherwise process the arguments
    if (length(arg) == 0L){
        vignette()
    } else {
        vignette_args <- preprocess_vignette_args(arg)

        display_vignette <- function(x){
            package <- x[1]
            topic   <- x[2]
            ## check for html vignettes
            all_packages <- rownames(installed.packages())
            html_vignettes <- unlist(lapply(all_packages, function(x) {
                system.file(sprintf('doc/%s.html', topic), package = x)
            }))

            html_vignettes <- html_vignettes[html_vignettes != '']
            if (length(html_vignettes) > 0){
                lapply(html_vignettes, function(x)
                    if (x != '') browseURL(x))
            } else {
                vignette(topic   = (topic),
                         package = (if (package == 'NULL') NULL
                                    else package))
            }
        }

        lapply(vignette_args, display_vignette)
    }
}

## -----
## Main
## -----
#capture.output(
if ('-v' == arg[1]){
    Vignette(arg[-1])
## } else if ('-s' == arg[1]){
##     SOS(arg[-1])
## } else if ('-hs' == arg[1]) {
##     Help.search(arg[-1])
} else {
    Help(arg)
}#, type = 'output', file = tempfile())



## ----------------------
## SOS (and its helpers)
## ----------------------

## SOS <- function(arg) {
    
##     RSiteSearch(paste0('{', paste(arg, collapse = ' '), '}'),
##                 restrict = 'functions', # somewhat similar to sos
##                 format = 'short',
##                 sortby = 'score',
##                 matchesPerPage = 100)
                
    ## suppressPackageStartupMessages(
    ## if (!require('sos')){
    ##     install.package('sos')
    ## } else {
    ##     sos::findFn(string = paste(arg, collapse = ' '))
    ## })
## }
